name: Database Migration

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  migrate-database:
    runs-on: ubuntu-24.04
    environment: Staging
    permissions:
      contents: write
      pull-requests: write
      checks: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ secrets.AWS_DEFAULT_REGION }}


      - name: Check Database Public Accessibility
        id: check-db
        run: |
          DB_INFO=$(aws lightsail get-relational-database --relational-database-name merchtrack-db-sgp1)
          IS_PUBLIC=$(echo "$DB_INFO" | jq -r '.relationalDatabase.publiclyAccessible')
          echo "is_public=$IS_PUBLIC" >> $GITHUB_OUTPUT


      - name: Open Database to Public Network
        if: ${{ steps.check-db.outputs.is_public == 'false' }}
        run: |
          aws lightsail update-relational-database \
            --relational-database-name merchtrack-db-sgp1 \
            --publicly-accessible

      - name: Wait for Database Availability
        run: |
          MAX_ATTEMPTS=30
          ATTEMPT=1
          
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            DB_STATUS=$(aws lightsail get-relational-database --relational-database-name merchtrack-db-sgp1 | jq -r '.relationalDatabase.state')
            
            if [ "$DB_STATUS" = "available" ]; then
              echo "Database is available!"
              break
            fi
            
            echo "Attempt $ATTEMPT: Database status is $DB_STATUS. Waiting 10 seconds..."
            sleep 10
            ATTEMPT=$((ATTEMPT + 1))
          done
          
          if [ $ATTEMPT -gt $MAX_ATTEMPTS ]; then
            echo "Database did not become available within the timeout period"
            exit 1
          fi

      - name: Create Database Backup
        uses: tj-actions/pg-dump@c826d55715b153f5572006e464e69b2bf0422fea # v3.0.1
        with:
          database_url: ${{ github.event.inputs.environment == 'production' && secrets.PRODUCTION || secrets.STAGING }}
          postgresql_version: "17"  
          path: "./backup.sql"
          options: "-O"

      - name: Upload Database Backup
        uses: actions/upload-artifact@v4
        with:
          name: database-backup
          path: backup.sql

      - name: Create .env file
        run: |
          if [ "${{ github.event.inputs.environment }}" == "production" ]; then
            echo "DATABASE_URL=${{ secrets.PRODUCTION }}" > .env
          else
            echo "DATABASE_URL=${{ secrets.STAGING }}" > .env
          fi

      - uses: oven-sh/setup-bun@4bc047ad259df6fc24a6c9b0f9a0cb08cf17fbe5 #v2.0.1
        with:
          bun-version: latest

      - name: Run Database Migration
        run: |
          bun install && bunx prisma migrate deploy

      - name: Close Database to Public Network
        run: |
          aws lightsail update-relational-database \
            --relational-database-name merchtrack-db-sgp1 \
            --no-publicly-accessible

